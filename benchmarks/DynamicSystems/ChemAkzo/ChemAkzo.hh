/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
 * Copyright (c) 2025, Davide Stocco and Enrico Bertolazzi.                                      *
 *                                                                                               *
 * The Sandals project is distributed under the BSD 2-Clause License.                            *
 *                                                                                               *
 * Davide Stocco                                                               Enrico Bertolazzi *
 * University of Trento                                                     University of Trento *
 * e-mail: davide.stocco@unitn.it                             e-mail: enrico.bertolazzi@unitn.it *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

// C++ generated code for implicit system: ChemAkzo
// This file has been automatically generated by Sandals.
// DISCLAIMER: If you need to edit it, do it wisely!

#ifndef SANDALS_MAPLE_CHEMAKZO_IMPLICIT_HH
#define SANDALS_MAPLE_CHEMAKZO_IMPLICIT_HH

using namespace Sandals;
using namespace std;

// No class description available.
class ChemAkzo : public Implicit<6, 0>
{
  // Class data
  Real m_k_1{18.7}; // Data variable 1
  Real m_k_2{.58}; // Data variable 2
  Real m_k_3{.9e-1}; // Data variable 3
  Real m_k_4{.42}; // Data variable 4
  Real m_K{34.4}; // Data variable 5
  Real m_klA{3.3}; // Data variable 6
  Real m_K_s{115.83}; // Data variable 7
  Real m_p_CO2{.9}; // Data variable 8
  Real m_H{737.0}; // Data variable 9

public:
  using VectorF  = typename Implicit<6, 0>::VectorF;
  using MatrixJF = typename Implicit<6, 0>::MatrixJF;
  using VectorH  = typename Implicit<6, 0>::VectorH;
  using MatrixJH = typename Implicit<6, 0>::MatrixJH;

  // Class constructor.
  ChemAkzo() : Implicit<6, 0>("ChemAkzo") {}

  // Data variable 1 getter.
  Real get_k_1() const {return this->m_k_1;}

  // Data variable 1 setter.
  void set_k_1(Real t_k_1) {this->m_k_1 = t_k_1;}

  // Data variable 2 getter.
  Real get_k_2() const {return this->m_k_2;}

  // Data variable 2 setter.
  void set_k_2(Real t_k_2) {this->m_k_2 = t_k_2;}

  // Data variable 3 getter.
  Real get_k_3() const {return this->m_k_3;}

  // Data variable 3 setter.
  void set_k_3(Real t_k_3) {this->m_k_3 = t_k_3;}

  // Data variable 4 getter.
  Real get_k_4() const {return this->m_k_4;}

  // Data variable 4 setter.
  void set_k_4(Real t_k_4) {this->m_k_4 = t_k_4;}

  // Data variable 5 getter.
  Real get_K() const {return this->m_K;}

  // Data variable 5 setter.
  void set_K(Real t_K) {this->m_K = t_K;}

  // Data variable 6 getter.
  Real get_klA() const {return this->m_klA;}

  // Data variable 6 setter.
  void set_klA(Real t_klA) {this->m_klA = t_klA;}

  // Data variable 7 getter.
  Real get_K_s() const {return this->m_K_s;}

  // Data variable 7 setter.
  void set_K_s(Real t_K_s) {this->m_K_s = t_K_s;}

  // Data variable 8 getter.
  Real get_p_CO2() const {return this->m_p_CO2;}

  // Data variable 8 setter.
  void set_p_CO2(Real t_p_CO2) {this->m_p_CO2 = t_p_CO2;}

  // Data variable 9 getter.
  Real get_H() const {return this->m_H;}

  // Data variable 9 setter.
  void set_H(Real t_H) {this->m_H = t_H;}

  // Evaluate the function F.
  VectorF F(VectorF const & in_0, VectorF const & in_1, Real /*in_2*/) const override
  {
    // Create data' aliases
    Real const & k_1 = this->m_k_1; // Data variable 1
    Real const & k_2 = this->m_k_2; // Data variable 2
    Real const & k_3 = this->m_k_3; // Data variable 3
    Real const & k_4 = this->m_k_4; // Data variable 4
    Real const & K = this->m_K; // Data variable 5
    Real const & klA = this->m_klA; // Data variable 6
    Real const & K_s = this->m_K_s; // Data variable 7
    Real const & p_CO2 = this->m_p_CO2; // Data variable 8
    Real const & H = this->m_H; // Data variable 9

    // Create inputs' aliases
    Real const & y_1 = in_0(0); // State variable 1
    Real const & y_2 = in_0(1); // State variable 2
    Real const & y_3 = in_0(2); // State variable 3
    Real const & y_4 = in_0(3); // State variable 4
    Real const & y_5 = in_0(4); // State variable 5
    Real const & y_6 = in_0(5); // State variable 6
    Real const & y_1_dot = in_1(0); // State variable 1 derivative
    Real const & y_2_dot = in_1(1); // State variable 2 derivative
    Real const & y_3_dot = in_1(2); // State variable 3 derivative
    Real const & y_4_dot = in_1(3); // State variable 4 derivative
    Real const & y_5_dot = in_1(4); // State variable 5 derivative

    // Evaluate computation sequence
    // Nothing to evaluate

    // Evaluate function entries
    Real t1 = y_1 * y_1;
    Real t2 = t1 * t1;
    Real t3 = t2 * k_1;
    Real t4 = sqrt(y_2);
    Real t5 = K * t4;
    Real t6 = t5 * t3;
    Real t8 = k_3 * y_1;
    Real t9 = y_4 * y_4;
    Real t12 = k_2 * y_3;
    Real t14 = y_4 * K * t12;
    Real t16 = k_2 * y_1 * y_5;
    Real t19 = 0.1e1 / K;
    Real out_0 = t19 * (K * t9 * t8 + y_1_dot * K - t14 + t16 + 2 * t6);
    Real t20 = y_6 * y_6;
    Real t21 = k_4 * t20;
    Real out_1 = 0.1e1 / H * (t4 * (t3 + t21) * H + 2 * y_2_dot * H + 2 * H * t9 * t8 + 2 * klA * (H * y_2 - p_CO2)) / 2;
    Real out_2 = t19 * (y_3_dot * K + t14 - t16 - t6);
    Real out_3 = -y_1 * y_5 * t19 * k_2 + y_4 * t12 + 2 * t9 * t8 + y_4_dot;
    Real out_4 = t19 * (y_5_dot * K - t5 * t21 - t14 + t16);
    Real out_5 = -K_s * y_1 * y_4 + y_6;

    // Return results
    VectorF out_F;
    out_F <<
      out_0, out_1, out_2, out_3, out_4, out_5;
    return out_F;
  }

  // Evaluate the Jacobian of F with respect to x.
  MatrixJF JF_x(VectorF const & in_0, VectorF const & /*in_1*/, Real /*in_2*/) const override
  {
    // Create data' aliases
    Real const & k_1 = this->m_k_1; // Data variable 1
    Real const & k_2 = this->m_k_2; // Data variable 2
    Real const & k_3 = this->m_k_3; // Data variable 3
    Real const & k_4 = this->m_k_4; // Data variable 4
    Real const & K = this->m_K; // Data variable 5
    Real const & klA = this->m_klA; // Data variable 6
    Real const & K_s = this->m_K_s; // Data variable 7
    Real const & H = this->m_H; // Data variable 9

    // Create inputs' aliases
    Real const & y_1 = in_0(0); // State variable 1
    Real const & y_2 = in_0(1); // State variable 2
    Real const & y_3 = in_0(2); // State variable 3
    Real const & y_4 = in_0(3); // State variable 4
    Real const & y_5 = in_0(4); // State variable 5
    Real const & y_6 = in_0(5); // State variable 6

    // Evaluate computation sequence
    // Nothing to evaluate

    // Evaluate function entries
    Real t1 = y_1 * y_1;
    Real t2 = t1 * y_1;
    Real t4 = sqrt(y_2);
    Real t6 = K * t4 * t2 * k_1;
    Real t8 = y_4 * y_4;
    Real t9 = t8 * k_3;
    Real t11 = k_2 * y_5;
    Real t13 = 0.1e1 / K;
    Real out_0_0 = t13 * (K * t9 + t11 + 8 * t6);
    Real t21 = 0.1e1 / H;
    Real out_0_1 = t21 * (4 * t4 * t2 * H * k_1 + 2 * H * t9) / 2;
    Real out_0_2 = t13 * (-4 * t6 - t11);
    Real t26 = y_5 * t13 * k_2;
    Real out_0_3 = -t26 + 2 * t9;
    Real out_0_4 = t26;
    Real out_0_5 = -K_s * y_4;
    Real t29 = t1 * t1;
    Real t30 = t29 * k_1;
    Real t31 = 0.1e1 / t4;
    Real out_1_0 = t31 * t30;
    Real t32 = y_6 * y_6;
    Real t33 = k_4 * t32;
    Real out_1_1 = t21 * (t31 * (t30 + t33) * H / 2 + 2 * klA * H) / 2;
    Real out_1_2 = -out_1_0 / 2;
    Real out_1_3 = 0;
    Real out_1_4 = -t31 * t33 / 2;
    Real out_1_5 = 0;
    Real t45 = k_2 * y_4;
    Real out_2_0 = -t45;
    Real out_2_1 = 0;
    Real out_2_2 = t45;
    Real out_2_3 = out_2_2;
    Real out_2_4 = out_2_0;
    Real out_2_5 = 0;
    Real t46 = k_3 * y_1;
    Real out_3_0 = t13 * (-k_2 * y_3 * K + 2 * y_4 * K * t46);
    Real t53 = y_4 * t46;
    Real out_3_1 = 2 * t53;
    Real out_3_2 = k_2 * y_3;
    Real out_3_3 = 4 * t53 + out_3_2;
    Real out_3_4 = -out_3_2;
    Real out_3_5 = -K_s * y_1;
    Real out_4_0 = t13 * y_1 * k_2;
    Real out_4_1 = 0;
    Real out_4_2 = -out_4_0;
    Real out_4_3 = out_4_2;
    Real out_4_4 = out_4_0;
    Real out_4_5 = 0;
    Real out_5_0 = 0;
    Real out_5_1 = t4 * k_4 * y_6;
    Real out_5_2 = 0;
    Real out_5_3 = 0;
    Real out_5_4 = -2 * out_5_1;
    Real out_5_5 = 1;

    // Return results
    MatrixJF out_JF_x;
    out_JF_x <<
      out_0_0, out_0_1, out_0_2, out_0_3, out_0_4, out_0_5, out_1_0, out_1_1, out_1_2, out_1_3, out_1_4, out_1_5, out_2_0, out_2_1, out_2_2, out_2_3, out_2_4, out_2_5, out_3_0, out_3_1, out_3_2, out_3_3, out_3_4, out_3_5, out_4_0, out_4_1, out_4_2, out_4_3, out_4_4, out_4_5, out_5_0, out_5_1, out_5_2, out_5_3, out_5_4, out_5_5;
    return out_JF_x;
  }
  // Evaluate the Jacobian of F with respect to x_dot.
  MatrixJF JF_x_dot(VectorF const & /*in_0*/, VectorF const & /*in_1*/, Real /*in_2*/) const override
  {
    // Create data' aliases
    // None

    // Create inputs' aliases
    // None

    // Evaluate computation sequence
    // Nothing to evaluate

    // Evaluate function entries
    // Nothing to evaluate

    // Return results
    MatrixJF out_JF_x_dot;
    out_JF_x_dot.setZero();
    return out_JF_x_dot;
  }

  // Calculate the vector h of the invariants.
  VectorH h(VectorF const & /*in_0*/, Real /*in_1*/) const override
  {
    // Create data' aliases
    // None

    // Create inputs' aliases
    // None

    // Evaluate computation sequence
    // Nothing to evaluate

    // Evaluate function entries
    // Nothing to evaluate

    // Return results
    VectorH out_h;
    out_h.setZero();
    return out_h;
  }

  // Calculate the Jacobian of h with respect to x.
  MatrixJH Jh_x(VectorF const & /*in_0*/, Real /*in_1*/) const override
  {
    // Create data' aliases
    // None

    // Create inputs' aliases
    // None

    // Evaluate computation sequence
    // Nothing to evaluate

    // Evaluate function entries
    // Nothing to evaluate

    // Return results
    MatrixJH out_Jh_x;
    out_Jh_x.setZero();
    return out_Jh_x;
  }

  // Check if the system is in the defined domain.
  bool in_domain(VectorF const &/*x*/, Real /*t*/) const override {return true;}

  // Return the initial integration time
  Real t_ini() const {return 0.;}

  // Return the final integration time
  Real t_end() const {return 180.0;}

  // Evaluate the initial conditions.
  VectorF ics() const
  {
    // Create data' aliases
    Real const & K_s = this->m_K_s; // Data variable 7

    // Create inputs' aliases
    // None

    // Evaluate computation sequence
    // Nothing to evaluate

    // Evaluate function entries
    Real out_0 = 0.444e0;
    Real out_1 = 0.123e-2;
    Real out_2 = 0.0e0;
    Real out_3 = 0.7e-2;
    Real out_4 = 0.0e0;
    Real out_5 = 0.3108e-2 * K_s;

    // Return results
    VectorF out_ics;
    out_ics <<
      out_0, out_1, out_2, out_3, out_4, out_5;
    return out_ics;
  }

}; // class ChemAkzo

#endif // SANDALS_MAPLE_CHEMAKZO_IMPLICIT_HH
